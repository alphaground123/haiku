#!/usr/bin/env node

var cli = require('command-router')
  , haiku = require('../')
  , path = require('path')
  , fs = require('fs')
  , rimraf = require('rimraf')

cli.on('notfound', help)

// CLI options and defaults
cli.option({ name: 'port'
, alias: 'p'
, default: process.env.PORT || 8080
, type: Number
})

cli.option({ name: 'host'
, alias: 'h'
, default: process.env.HOST || '0.0.0.0'
, type: String
})

cli.option({ name: 'log-level'
, alias: 'l'
, default: 'warn'
, type: String
})

cli.option({ name: 'root'
, default: process.cwd()
, type: path
})

// CLI commands
cli.command('server', function(){
  // server(cli.options)
  // .listen(cli.options.port, cli.options.host)
})

cli.command('build', function(){
  haiku
  .configure(cli.options)
  .on('error', function(err){
    // TODO: just console.error the err.message
    throw err
  })
  .on('end', function(){
    console.log('ended reading'.green)

    rimraf(haiku['build-dir'], function(err){
      haiku.pages.forEach(function(page){
        page.write(function(err){
          if (err) throw err
          // console.log('wrote:'.green, page.url)
        })
      })
    })
  })
  .read()
})

// Kick the whole thing off...
cli.parse(process.argv)

// # help(action)
//
// Display help for `action` defined in doc/cli/<action>.md then exit 1
//
//    help('build')
//
function help(action){
  var action = action || 'index'
    , file = path.join(__dirname, '..', 'doc', 'cli', action + '.md')

  // `cli.on('notfound', help)` makes its possible to try and look up
  // help for non-existent commands. If that is the case just show the
  // default.
  fs.exists(file, function(exists){
    if (!exists) return help()

    fs.createReadStream(file, { encoding: 'utf8' })
    .on('data', console.log)
    .on('error', function(err){ throw err })
    .on('end', function(){ process.exit(1) })
  })
}
