#!/usr/bin/env node

const cli = require('command-router')
    , haiku = require('../')
    , path = require('path')
    , fs = require('fs')
    , hogan = require('hogan.js')
    , pkg = require('../package.json')
    , errno = require('errno')
    , http = require('http')
    , st = require('st')

cli
.option('help', { alias: 'h', type: Boolean })
.option('src', { default: process.cwd(), type: path })
.option('host', { default: 'localhost', type: String })
.option('port', { default: 8080, type: Number })
.on('notfound', function(){
  help('index', function(){ process.exit(1) })
})
.command('server', server)
.command('help ?:topic?', function(params){
  help(params.topic)
})
.parse(process.argv)

// # help(action)
//
// Display help for `action` defined in doc/cli/<action>.md
//
//    help('build')
//
function help(topic, callback){
  topic = topic || 'index'
  callback = callback || function(){}

  var file = path.join(__dirname, '..', 'doc', 'cli', topic + '.md')

  if (topic === 'index') return mustache(file, callback)

  console.log()

  fs.createReadStream(file, { encoding: 'utf8' })
  .on('data', console.log)
  .on('error', onerror)
  .on('end', callback)

  function onerror(err){
    if (err.code === 'ENOENT') console.error('No help for: "' + topic + '"')
    else console.error(errno.code[err.code].description)
    console.error()
    process.exit(1)
  }
}

function mustache(file, callback){
  fs.readFile(file, 'utf8', function(err, data){
    var template = hogan.compile(data)
    var context = { cwd: process.cwd()
        , version: pkg.version
        , location: path.dirname(require.resolve('../'))
        }
    var output = template.render(context)

    console.log(output)
  })
}

function server(params, options){
  if (options.help) return help('server')

  var resHaiku = require('../lib/res-haiku')
    , mount = st({ path: options.src + '/public'
      , url: '/'
      , passthrough: true
      , index: false
      })

  // NOTE: It would be nice to see some log output

  http
  .createServer(listener)
  .listen(options.port, options.host)

  function listener(req, res){
    mount(req, res, function(){
      res.haiku = resHaiku(req, res, options.src)
      res.haiku(req.url)
    })
  }
}

function bad(subcommand, value){
  var message = [ 'No haiku'
      , subcommand
      , '<subcommand> named'
      , '"' + value + '"'
      ].join(' ')

  console.error(message)
  process.exit(1)
}
